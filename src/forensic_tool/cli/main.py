"""
Interface de linha de comando para Forensic Tool
"""

import sys
import time
import signal
from pathlib import Path
from typing import Optional, List, Dict, Any
import click
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn, TimeRemainingColumn
from rich.panel import Panel
from rich.text import Text
from rich.live import Live
import json

from ..core import Config, AnalysisManager, get_config, load_config
from ..utils import setup_logger
from .reports import ReportGenerator

console = Console()


class CLIManager:
    """Gerenciador da interface CLI"""
    
    def __init__(self):
        self.config = get_config()
        self.analysis_manager = None
        self.current_session_id = None
        self.shutdown_requested = False
        
        # Configurar handler de sinal
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Handler para sinais de interrup√ß√£o"""
        self.shutdown_requested = True
        console.print("\n[yellow]Interrup√ß√£o recebida. Finalizando an√°lise...[/yellow]")
        
        if self.analysis_manager and self.current_session_id:
            self.analysis_manager.cancel_analysis(self.current_session_id)
        
        sys.exit(0)
    
    def initialize(self, config_file: Optional[str] = None, log_level: str = "INFO"):
        """Inicializa o gerenciador CLI"""
        try:
            # Carregar configura√ß√£o
            if config_file:
                self.config = load_config(config_file)
            
            # Configurar logging
            setup_logger(
                level=log_level,
                log_file=self.config.logging.file_path,
                console_output=False,  # CLI gerencia sua pr√≥pria sa√≠da
                rich_console=False
            )
            
            # Inicializar gerenciador de an√°lises
            self.analysis_manager = AnalysisManager(self.config)
            
            return True
            
        except Exception as e:
            console.print(f"[red]Erro na inicializa√ß√£o: {e}[/red]")
            return False
    
    def analyze_directory(self, 
                         directory: str,
                         output_dir: Optional[str] = None,
                         formats: List[str] = None,
                         include_hashes: bool = True,
                         max_files: Optional[int] = None) -> bool:
        """Executa an√°lise de diret√≥rio"""
        
        if not self.analysis_manager:
            console.print("[red]Gerenciador n√£o inicializado[/red]")
            return False
        
        try:
            directory_path = Path(directory).resolve()
            
            # Validar diret√≥rio
            if not directory_path.exists():
                console.print(f"[red]Diret√≥rio n√£o encontrado: {directory}[/red]")
                return False
            
            if not directory_path.is_dir():
                console.print(f"[red]Caminho n√£o √© um diret√≥rio: {directory}[/red]")
                return False
            
            # Gerar ID da sess√£o
            session_id = f"cli_{int(time.time())}"
            self.current_session_id = session_id
            
            # Mostrar informa√ß√µes iniciais
            self._show_analysis_header(directory_path, session_id)
            
            # Iniciar an√°lise
            if not self.analysis_manager.start_analysis(session_id, str(directory_path), include_hashes, max_files):
                console.print("[red]Falha ao iniciar an√°lise[/red]")
                return False
            
            # Monitorar progresso
            success = self._monitor_analysis_progress(session_id)
            
            if success and not self.shutdown_requested:
                # Gerar relat√≥rios
                self._generate_reports(session_id, output_dir, formats or ['json', 'csv'])
                
                # Mostrar estat√≠sticas finais
                self._show_final_statistics(session_id)
            
            return success
            
        except Exception as e:
            console.print(f"[red]Erro na an√°lise: {e}[/red]")
            return False
    
    def _show_analysis_header(self, directory: Path, session_id: str):
        """Mostra cabe√ßalho da an√°lise"""
        header_table = Table(show_header=False, box=None, padding=(0, 1))
        header_table.add_column("Label", style="bold cyan")
        header_table.add_column("Value", style="white")
        
        header_table.add_row("üîç An√°lise Forense", "Forensic Tool v2.0")
        header_table.add_row("üìÅ Diret√≥rio", str(directory))
        header_table.add_row("üÜî Sess√£o", session_id)
        header_table.add_row("‚öôÔ∏è  Threads", str(self.config.analysis.thread_count))
        header_table.add_row("üì¶ Tamanho M√°ximo", f"{self.config.analysis.max_file_size_mb}MB")
        
        console.print(Panel(header_table, title="[bold green]Iniciando An√°lise[/bold green]", border_style="green"))
    
    def _monitor_analysis_progress(self, session_id: str) -> bool:
        """Monitora progresso da an√°lise com barra de progresso"""
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TaskProgressColumn(),
            TimeRemainingColumn(),
            console=console,
            transient=False
        ) as progress:
            
            # Aguardar in√≠cio da an√°lise
            while True:
                analysis_progress = self.analysis_manager.get_analysis_progress(session_id)
                if analysis_progress:
                    break
                time.sleep(0.1)
            
            # Criar task de progresso
            task = progress.add_task(
                f"Analisando arquivos...",
                total=analysis_progress.total_files
            )
            
            last_update = 0
            
            # Monitorar progresso
            while True:
                if self.shutdown_requested:
                    return False
                
                current_progress = self.analysis_manager.get_analysis_progress(session_id)
                
                if not current_progress:
                    # An√°lise conclu√≠da ou erro
                    session = self.analysis_manager.get_analysis_session(session_id)
                    if session and session.status == "completed":
                        progress.update(task, completed=analysis_progress.total_files)
                        return True
                    else:
                        console.print("[red]An√°lise falhou ou foi cancelada[/red]")
                        return False
                
                # Atualizar progresso
                if current_progress.processed_files != last_update:
                    progress.update(
                        task,
                        completed=current_progress.processed_files,
                        description=f"Analisando: {current_progress.current_file}"
                    )
                    last_update = current_progress.processed_files
                
                time.sleep(0.5)
    
    def _generate_reports(self, session_id: str, output_dir: Optional[str], formats: List[str]):
        """Gera relat√≥rios da an√°lise"""
        try:
            output_path = Path(output_dir) if output_dir else Path.cwd()
            output_path.mkdir(parents=True, exist_ok=True)
            
            console.print("\n[cyan]Gerando relat√≥rios...[/cyan]")
            
            report_generator = ReportGenerator(self.analysis_manager)
            generated_files = report_generator.generate_reports(session_id, output_path, formats)
            
            if generated_files:
                console.print("\n[green]‚úÖ Relat√≥rios gerados:[/green]")
                for file_path in generated_files:
                    console.print(f"   üìÑ {file_path}")
            else:
                console.print("[yellow]‚ö†Ô∏è  Nenhum relat√≥rio foi gerado[/yellow]")
                
        except Exception as e:
            console.print(f"[red]Erro ao gerar relat√≥rios: {e}[/red]")
    
    def _show_final_statistics(self, session_id: str):
        """Mostra estat√≠sticas finais"""
        try:
            stats = self.analysis_manager.get_session_statistics(session_id)
            session = self.analysis_manager.get_analysis_session(session_id)
            
            if not stats or not session:
                return
            
            # Tabela de estat√≠sticas
            stats_table = Table(title="[bold green]Estat√≠sticas da An√°lise[/bold green]", box=None)
            stats_table.add_column("M√©trica", style="bold cyan")
            stats_table.add_column("Valor", style="white")
            
            # Estat√≠sticas b√°sicas
            stats_table.add_row("üìä Total de Arquivos", str(stats.get('total_results', 0)))
            stats_table.add_row("‚úÖ Sucessos", str(stats.get('successful', 0)))
            stats_table.add_row("‚ùå Falhas", str(stats.get('failed', 0)))
            stats_table.add_row("üìà Taxa de Sucesso", f"{stats.get('success_rate', 0):.1f}%")
            stats_table.add_row("‚è±Ô∏è  Dura√ß√£o M√©dia", f"{stats.get('average_duration', 0):.2f}s")
            stats_table.add_row("üíæ Tamanho Total", f"{stats.get('total_size_mb', 0):.1f}MB")
            
            if session.duration:
                duration_str = str(session.duration).split('.')[0]  # Remover microsegundos
                stats_table.add_row("üïê Dura√ß√£o Total", duration_str)
            
            console.print("\n")
            console.print(stats_table)
            
            # Tipos de arquivo mais comuns
            file_types = stats.get('file_types', {})
            if file_types:
                console.print("\n[bold cyan]üìÅ Tipos de Arquivo Encontrados:[/bold cyan]")
                
                types_table = Table(show_header=True, header_style="bold magenta")
                types_table.add_column("Tipo", style="cyan")
                types_table.add_column("Quantidade", justify="right", style="white")
                
                # Ordenar por quantidade
                sorted_types = sorted(file_types.items(), key=lambda x: x[1], reverse=True)
                
                for file_type, count in sorted_types[:10]:  # Top 10
                    types_table.add_row(file_type, str(count))
                
                console.print(types_table)
            
        except Exception as e:
            console.print(f"[red]Erro ao mostrar estat√≠sticas: {e}[/red]")
    
    def list_recent_sessions(self, limit: int = 10):
        """Lista sess√µes recentes"""
        if not self.analysis_manager:
            console.print("[red]Gerenciador n√£o inicializado[/red]")
            return
        
        try:
            sessions = self.analysis_manager.get_recent_sessions(limit)
            
            if not sessions:
                console.print("[yellow]Nenhuma sess√£o encontrada[/yellow]")
                return
            
            sessions_table = Table(title="[bold green]Sess√µes Recentes[/bold green]")
            sessions_table.add_column("ID da Sess√£o", style="cyan")
            sessions_table.add_column("Diret√≥rio", style="white")
            sessions_table.add_column("Status", style="bold")
            sessions_table.add_column("Arquivos", justify="right", style="white")
            sessions_table.add_column("Data", style="dim")
            
            for session in sessions:
                status_style = {
                    'completed': 'green',
                    'running': 'yellow',
                    'error': 'red',
                    'cancelled': 'dim'
                }.get(session.get('status', 'unknown'), 'white')
                
                sessions_table.add_row(
                    session.get('session_id', ''),
                    session.get('directory_path', ''),
                    f"[{status_style}]{session.get('status', 'unknown')}[/{status_style}]",
                    f"{session.get('successful_files', 0)}/{session.get('total_files', 0)}",
                    session.get('created_at', '')[:19] if session.get('created_at') else ''
                )
            
            console.print(sessions_table)
            
        except Exception as e:
            console.print(f"[red]Erro ao listar sess√µes: {e}[/red]")
    
    def show_session_details(self, session_id: str):
        """Mostra detalhes de uma sess√£o espec√≠fica"""
        if not self.analysis_manager:
            console.print("[red]Gerenciador n√£o inicializado[/red]")
            return
        
        try:
            session = self.analysis_manager.get_analysis_session(session_id)
            stats = self.analysis_manager.get_session_statistics(session_id)
            
            if not session:
                console.print(f"[red]Sess√£o n√£o encontrada: {session_id}[/red]")
                return
            
            # Informa√ß√µes da sess√£o
            session_table = Table(title=f"[bold green]Detalhes da Sess√£o: {session_id}[/bold green]", box=None)
            session_table.add_column("Campo", style="bold cyan")
            session_table.add_column("Valor", style="white")
            
            session_table.add_row("Diret√≥rio", session.directory_path)
            session_table.add_row("Status", session.status)
            session_table.add_row("Total de Arquivos", str(session.total_files))
            session_table.add_row("Processados", str(session.processed_files))
            session_table.add_row("Sucessos", str(session.successful_files))
            session_table.add_row("Falhas", str(session.failed_files))
            session_table.add_row("In√≠cio", session.start_time.strftime("%Y-%m-%d %H:%M:%S"))
            
            if session.end_time:
                session_table.add_row("Fim", session.end_time.strftime("%Y-%m-%d %H:%M:%S"))
            
            if session.duration:
                duration_str = str(session.duration).split('.')[0]
                session_table.add_row("Dura√ß√£o", duration_str)
            
            if session.error_message:
                session_table.add_row("Erro", session.error_message)
            
            console.print(session_table)
            
            # Estat√≠sticas se dispon√≠veis
            if stats:
                console.print(f"\n[bold cyan]üìä Estat√≠sticas:[/bold cyan]")
                console.print(f"   Taxa de Sucesso: {stats.get('success_rate', 0):.1f}%")
                console.print(f"   Tamanho Total: {stats.get('total_size_mb', 0):.1f}MB")
                console.print(f"   Dura√ß√£o M√©dia por Arquivo: {stats.get('average_duration', 0):.2f}s")
            
        except Exception as e:
            console.print(f"[red]Erro ao mostrar detalhes da sess√£o: {e}[/red]")
    
    def find_duplicates(self, session_id: Optional[str] = None, hash_type: str = 'sha256'):
        """Encontra arquivos duplicados"""
        if not self.analysis_manager:
            console.print("[red]Gerenciador n√£o inicializado[/red]")
            return
        
        try:
            duplicates = self.analysis_manager.find_duplicates(session_id, hash_type)
            
            if not duplicates:
                console.print("[green]Nenhum arquivo duplicado encontrado[/green]")
                return
            
            console.print(f"[bold red]üîç Arquivos Duplicados Encontrados ({hash_type.upper()}):[/bold red]\n")
            
            for hash_value, file_paths in duplicates.items():
                console.print(f"[bold yellow]Hash: {hash_value}[/bold yellow]")
                for path in file_paths:
                    console.print(f"   üìÑ {path}")
                console.print()
            
            console.print(f"[bold cyan]Total: {len(duplicates)} grupos de duplicatas[/bold cyan]")
            
        except Exception as e:
            console.print(f"[red]Erro ao encontrar duplicatas: {e}[/red]")
    
    def cleanup_old_sessions(self, days: int = 30):
        """Remove sess√µes antigas"""
        if not self.analysis_manager:
            console.print("[red]Gerenciador n√£o inicializado[/red]")
            return
        
        try:
            removed_count = self.analysis_manager.cleanup_old_sessions(days)
            console.print(f"[green]‚úÖ {removed_count} sess√µes antigas removidas[/green]")
            
        except Exception as e:
            console.print(f"[red]Erro na limpeza: {e}[/red]")
    
    def show_supported_formats(self):
        """Mostra formatos suportados"""
        if not self.analysis_manager:
            console.print("[red]Gerenciador n√£o inicializado[/red]")
            return
        
        try:
            extensions = self.analysis_manager.get_supported_extensions()
            analyzers = self.analysis_manager.get_analyzer_info()
            
            # Tabela de extens√µes por categoria
            formats_table = Table(title="[bold green]Formatos Suportados[/bold green]")
            formats_table.add_column("Categoria", style="bold cyan")
            formats_table.add_column("Extens√µes", style="white")
            
            for category, exts in extensions.items():
                formats_table.add_row(category, ", ".join(sorted(exts)))
            
            console.print(formats_table)
            
            # Informa√ß√µes dos analisadores
            console.print("\n[bold cyan]üîß Analisadores Dispon√≠veis:[/bold cyan]")
            for analyzer in analyzers:
                console.print(f"   ‚Ä¢ {analyzer['name']}: {len(analyzer['extensions'])} extens√µes")
            
        except Exception as e:
            console.print(f"[red]Erro ao mostrar formatos: {e}[/red]")


# Inst√¢ncia global do gerenciador CLI
cli_manager = CLIManager()


@click.group(invoke_without_command=True)
@click.option('--config', '-c', help='Arquivo de configura√ß√£o')
@click.option('--log-level', default='INFO', help='N√≠vel de log (DEBUG, INFO, WARNING, ERROR)')
@click.option('--version', is_flag=True, help='Mostrar vers√£o')
@click.pass_context
def main(ctx, config, log_level, version):
    """üîç Forensic Tool - An√°lise Forense de Metadados"""
    
    if version:
        console.print("[bold green]Forensic Tool v2.0[/bold green]")
        console.print("Ferramenta avan√ßada de an√°lise forense de metadados")
        return
    
    if ctx.invoked_subcommand is None:
        console.print(ctx.get_help())
        return
    
    # Inicializar CLI manager
    if not cli_manager.initialize(config, log_level):
        sys.exit(1)


@main.command()
@click.argument('directory', type=click.Path(exists=True, file_okay=False, dir_okay=True))
@click.option('--output', '-o', help='Diret√≥rio de sa√≠da para relat√≥rios')
@click.option('--formats', '-f', default='json,csv', help='Formatos de relat√≥rio (json,csv,excel,html)')
@click.option('--no-hashes', is_flag=True, help='N√£o calcular hashes')
@click.option('--max-files', type=int, help='N√∫mero m√°ximo de arquivos a processar')
def analyze(directory, output, formats, no_hashes, max_files):
    """Analisa um diret√≥rio em busca de metadados forenses"""
    
    format_list = [f.strip() for f in formats.split(',')]
    include_hashes = not no_hashes
    
    success = cli_manager.analyze_directory(
        directory=directory,
        output_dir=output,
        formats=format_list,
        include_hashes=include_hashes,
        max_files=max_files
    )
    
    if not success:
        sys.exit(1)


@main.command()
@click.option('--limit', '-l', default=10, help='N√∫mero de sess√µes a mostrar')
def sessions(limit):
    """Lista sess√µes de an√°lise recentes"""
    cli_manager.list_recent_sessions(limit)


@main.command()
@click.argument('session_id')
def details(session_id):
    """Mostra detalhes de uma sess√£o espec√≠fica"""
    cli_manager.show_session_details(session_id)


@main.command()
@click.option('--session', '-s', help='ID da sess√£o (todas se n√£o especificado)')
@click.option('--hash-type', default='sha256', help='Tipo de hash (md5, sha1, sha256)')
def duplicates(session, hash_type):
    """Encontra arquivos duplicados"""
    cli_manager.find_duplicates(session, hash_type)


@main.command()
@click.option('--days', default=30, help='Idade em dias para remo√ß√£o')
def cleanup(days):
    """Remove sess√µes antigas do banco de dados"""
    cli_manager.cleanup_old_sessions(days)


@main.command()
def formats():
    """Mostra formatos de arquivo suportados"""
    cli_manager.show_supported_formats()


if __name__ == '__main__':
    main()
